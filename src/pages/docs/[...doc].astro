---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';

// 预生成所有文档路径
export async function getStaticPaths() {
  const docsEntries = await getCollection('docs');
  
  const paths = docsEntries.map(doc => {
    // 确保我们处理的是字符串格式的ID
    const docId = typeof doc.id === 'string' ? doc.id : String(doc.id);
    // 移除文件扩展名
    const docPath = docId.replace(/\.(md|mdx)$/, '');
    // 对于 [...doc] 路由，Astro要求将嵌套路径拆分为数组
    // 但根据Astro的最新行为，我们需要传递路径字符串，Astro会自动处理
    return {
      params: { doc: docPath },
      props: doc
    };
  });
  return paths;
}

type Props = CollectionEntry<'docs'>;

const currentDoc = Astro.props;
const { Content, headings } = await render(currentDoc);

// 生成文档内目录数据
const tableOfContents = headings.filter(h => h.depth >= 2 && h.depth <= 4).map(heading => ({
  id: heading.slug,
  text: heading.text,
  depth: heading.depth
}));

// 检查是否有可显示的目录项
const hasTableOfContents = tableOfContents.length > 0;

// 获取所有文档用于侧边栏
const sidebarDocsEntries = await getCollection('docs');

// 按分类和侧边栏顺序组织文档
const docsByCategory = sidebarDocsEntries.reduce((acc, doc) => {
  const category = doc.data.category || '未分类';
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(doc);
  return acc;
}, {} as Record<string, CollectionEntry<'docs'>[]>);

// 对每个分类下的文档按侧边栏顺序排序
Object.keys(docsByCategory).forEach(category => {
  docsByCategory[category].sort((a, b) => 
    (a.data.sidebar_order || 999) - (b.data.sidebar_order || 999)
  );
});

// 用于检查是否有文档的备用逻辑
const hasDocs = sidebarDocsEntries.length > 0;

// 获取动态路由参数（用于面包屑等）
// 注意：对于 [...doc] 路由，Astro.params.doc 可能是一个数组或字符串
// 如果是数组，需要将其转换为字符串路径
const doc = Array.isArray(Astro.params.doc) ? Astro.params.doc.join('/') : Astro.params.doc;

// 处理当前文档标题和描述
let currentTitle = 'Mastra 文档中心';
let currentDescription = 'Mastra 文档中心';

if (currentDoc) {
  currentTitle = currentDoc.data.title || currentTitle;
  currentDescription = currentDoc.data.description || currentDescription;
}
---

<html lang="zh-CN">
  <head>
    <BaseHead title={currentTitle} description={currentDescription} />
    <style>
      /* 文档页面布局 - 基于全局样式调整 */
      main {
        width: 1620px;
        max-width: calc(100% - 2em);
        margin: auto;
        padding: 3em 1em;
      }
      .docs-layout {
        display: flex;
        gap: 2rem;
        max-width: 1400px;
        margin: auto;
        padding: 1em 1em 3em;
      }
      
      /* 主内容容器 - 用于内容和右侧目录 */
      .content-container {
        display: flex;
        gap: 2rem;
        flex: 1;
      }
      
      /* 侧边栏样式 - 保持功能同时使用全局变量 */
      .sidebar {
        width: 280px;
        flex-shrink: 0;
        position: sticky;
        top: 2rem;
        max-height: calc(100vh - 4rem);
        overflow-y: auto;
        padding-right: 1rem;
        font-size: 0.9rem;
      }
      
      .sidebar h2 {
        margin-bottom: 1rem;
        color: rgb(var(--black));
        font-size: 1.5em;
      }
      
      .sidebar h3 {
        margin: 1.5rem 0 0.75rem 0;
        color: rgb(var(--gray));
        font-weight: 500;
        font-size: 1.1em;
      }
      
      .sidebar ul {
        list-style: none;
        padding: 0;
        margin: 0;
      }
      
      .sidebar li {
        margin: 0.35rem 0;
      }
      
      .sidebar a {
        display: block;
        padding: 0.5rem;
        color: rgb(var(--gray-dark));
        text-decoration: none;
        border-radius: 0.375rem;
        transition: background-color 0.2s;
      }
      
      .sidebar a:hover {
        background-color: rgba(var(--gray-light), 70%);
      }
      
      .sidebar a.active {
        background-color: rgba(35, 55, 255, 10%);
        color: var(--accent);
        font-weight: 500;
      }
      
      /* 内容区域样式 - 保持与全局样式一致 */
      .content {
        flex: 1;
        max-width: 1200px;
      }
      
      /* 右侧目录样式 */
      .right-sidebar {
        width: 280px;
        flex-shrink: 0;
        position: sticky;
        top: 2rem;
        max-height: calc(100vh - 4rem);
        overflow-y: auto;
        padding-left: 1rem;
        border-left: 1px solid rgba(var(--gray-light), 100%);
        font-size: 0.9rem;
      }
      
      .right-sidebar h3 {
        margin-top: 0;
        margin-bottom: 1rem;
        color: rgb(var(--black));
        font-size: 1.1em;
      }
      
      .toc-list {
        list-style: none;
        padding: 0;
        margin: 0;
      }
      
      .toc-list li {
        margin: 0.35rem 0;
      }
      
      .toc-list a {
        display: block;
        padding: 0.35rem 0;
        color: rgb(var(--gray-dark));
        text-decoration: none;
        transition: color 0.2s;
      }
      
      .toc-list a:hover {
        color: var(--accent);
      }
      
      .toc-item-h2 {
        margin-left: 0;
      }
      
      .toc-item-h3 {
        margin-left: 1rem;
        font-size: 0.95em;
      }
      
      .toc-item-h4 {
        margin-left: 2rem;
        font-size: 0.9em;
      }
      
      .content .description {
        margin-bottom: 2em;
        color: rgb(var(--gray));
      }
      
      /* 响应式设计 */
      @media (max-width: 1024px) {
        .sidebar {
          width: 240px;
        }
      }
      
      @media (max-width: 1200px) {
        .right-sidebar {
          width: 240px;
        }
      }
      
      @media (max-width: 1024px) {
        .sidebar {
          width: 240px;
        }
        
        .content-container {
          flex-direction: column;
        }
        
        .right-sidebar {
          width: 100%;
          position: static;
          max-height: none;
          overflow-y: visible;
          padding-left: 0;
          border-left: none;
          border-top: 1px solid rgba(var(--gray-light), 100%);
          padding-top: 1rem;
          margin-top: 1rem;
        }
      }
      
      @media (max-width: 768px) {
        .docs-layout {
          flex-direction: column;
          gap: 1rem;
        }
        
        .sidebar {
          width: 100%;
          position: static;
          max-height: none;
          overflow-y: visible;
          padding-right: 0;
          margin-bottom: 1rem;
        }
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <div class="docs-layout">
        <!-- 左侧文档导航 -->
        <div class="sidebar">
          <h2 style="margin-top: 0;">Mastra 文档目录</h2>
          {Object.entries(docsByCategory)
            // 分类排序：'Mastra' 排在最前面，然后是其他分类
            .sort(([categoryA], [categoryB]) => {
              if (categoryA === 'Mastra') return -1;
              if (categoryB === 'Mastra') return 1;
              return categoryA.localeCompare(categoryB);
            })
            .map(([category, docs]) => (
              <div key={category}>
                {category !== '未分类' && <h3>{category}</h3>}
                <ul>
                  {docs.map(doc => {
                    // 确保doc.id是字符串格式
                    const docIdStr = typeof doc.id === 'string' ? doc.id : String(doc.id);
                    const docPath = docIdStr.replace(/\.(md|mdx)$/, '');
                    // 生成正确的嵌套路径链接
                    return (
                      <li key={doc.id}>
                        <a 
                          href={`/docs/${docPath}`} 
                          class={currentDoc?.id === doc.id ? 'active' : ''}
                        >
                          {doc.data.title}
                        </a>
                      </li>
                    );
                  })}
                </ul>
              </div>
            ))}
          
          {!hasDocs && (
            <p style="color: #666; font-style: italic;">暂无文档内容</p>
          )}
        </div>
        
        <!-- 内容和右侧目录容器 -->
        <div class="content-container">
          <!-- 主要内容区域 -->
          <div class="content">
            {currentDoc ? (
              <article>
                <h1>{currentDoc.data.title}</h1>
                <p class="description" style="color: #666; font-size: 1.125rem; margin-bottom: 2rem;">
                  {currentDoc.data.description}
                </p>
                <Content />
              </article>
            ) : (
              <div style="text-align: center; padding: 3rem 0;">
                <h2>欢迎使用 Mastra 文档</h2>
                <p>请在左侧选择一个文档查看详情</p>
              </div>
            )}
          </div>
          
  
        </div>

        <!-- 右侧文档内目录 -->
        {hasTableOfContents && currentDoc && (
          <div class="right-sidebar">
            <h3>文档目录</h3>
            <ul class="toc-list">
              {tableOfContents.map((item, index) => (
                <li key={index} class={`toc-item-h${item.depth}`}>
                  <a href={`#${item.id}`}>{item.text}</a>
                </li>
              ))}
            </ul>
          </div>
        )}

      </div>
    </main>
    <Footer />
  </body>
</html>